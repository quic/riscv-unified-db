:tabs-sync-option:

[[inst:<%=inst.name.gsub('.', '_')%>-def]]
= <%= inst.name %>

*<%= inst.long_name %>*

This instruction is defined by<%- if inst.defined_by.size > 1 -%> any of the following<%- end -%>:

  <%- inst.defined_by.each do |ext| -%>
  * `<%= ext.name %>`, `<%= ext.version_requirement %>`
  <%- end -%>

<%- unless inst.extension_requirements.empty? -%>
Additionally, this instruction is only defined if the following <%- if inst.extension_requirements.size == 1 -%>extension is<%- else -%>extensions are<%- end -%> also present and active:

  <%- inst.extension_requirements.each do |ext| -%>
  * `<%= ext.name %>`, `<%= ext.version_requirement %>`
  <%- end -%>

<%- end -%>

== Encoding

<%- if inst.multi_encoding? -%>
[NOTE]
This instruction has different encodings in RV32 and RV64.

[tabs]
====
RV32::
+
[wavedrom, ,svg,subs='attributes',width="100%"]
....  
<%= JSON.dump inst.wavedrom_desc(32) %>
....

RV64::
+
[wavedrom, ,svg,subs='attributes',width="100%"]
....  
<%= JSON.dump inst.wavedrom_desc(64) %>
....
====
<%- else -%>
[wavedrom, ,svg,subs='attributes',width="100%"]
....  
<%= JSON.dump inst.wavedrom_desc(inst.base.nil? ? 32 : inst.base) %>
....
<%- end -%>

== Assembly format

`<%= inst.name %> <%= inst.assembly.gsub('x', 'r') %>`

== Synopsis

<%- if inst.data_independent_timing? -%>
[IMPORTANT]
This instruction must have data-independent timing when extension `Zkt` is enabled.
<%- end -%>

<%= inst.description %>

== Access
[cols="^,^,^,^,^"]
|===
| M | HS | U | VS | VU

| [.access-always]#Always#
| [.access-<%=inst.access['s']%>]#<%= inst.access['s'].capitalize %>#
| [.access-<%=inst.access['u']%>]#<%= inst.access['u'].capitalize %>#
| [.access-<%=inst.access['vs']%>]#<%= inst.access['vs'].capitalize %>#
| [.access-<%=inst.access['vu']%>]#<%= inst.access['vu'].capitalize %>#
|===

<%- if inst.access_detail? -%>
<%= inst.access_detail %>
<%- end -%>

== Decode Variables

<%- if inst.multi_encoding? -%>
[tabs]
====
RV32::
+
[source.idl]
----
<%- inst.decode_variables(32).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<%- end -%>
----

RV64::
+
[source,idl]
----
<%- inst.decode_variables(64).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<%- end -%>
----
====
<%- else -%>
[source,idl]
----
<%- inst.decode_variables(inst.base.nil? ? 32 : inst.base).each do |d| -%>
<%= d.sext? ? 'signed ' : '' %>Bits<<%= d.size %>> <%= d.name %> = <%= d.extract %>;
<%- end -%>
----
<%- end -%>

== Execution

<%- if inst.key?("operation()") -%>
[source,idl,subs="specialchars,macros"]
----
<%= inst.operation_ast(inst.arch_def.idl_compiler).gen_adoc %>
----
<%- end -%>

<%# exception_list = inst.reachable_exceptions_str(inst.arch_def.sym_table_64, 64) -%>
<%- exception_list = [] -%>
<%- unless exception_list.empty? -%>
== Exceptions

This instruction may result in the following synchronous exceptions:

  <%- exception_list.sort.each do |etype| -%>
  * <%= etype %>
  <%- end -%>

<%- end -%>