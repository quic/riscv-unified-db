= <%= crd.name %> Certification Requirements Document

== <%= crd.family.name %> Family Revision History

Contains documentation changes that apply to all releases of the family.

[cols="1,1,5"]
|===
| Date | Revision | Changes

<%- crd.family.revisions.each do |rev| -%>
| <%= rev.date %> 
| <%= rev.version %>
a| <%- rev.changes.each do |change| %>
* <%= change %>
<%- end -%>
<%- end -%>
|===

== Introduction

<%= crd.family.introduction %>

=== Naming Scheme

<%= crd.family.naming_scheme %>

=== <%= crd.name %> Description

<%= crd.description %>

=== Related Specifications

[cols="2,2,3,3,3"]
|===
| MC Version | TSC Profile | Unpriv ISA Manual | Priv ISA Manual | Debug Manual

| <%= crd.name %>
| <%= crd.tsc_profile.nil? ? "No profile" : crd.tsc_profile.marketing_name %>
| <%= crd.unpriv_isa_manual_revision %>
| <%= crd.priv_isa_manual_revision %>
| <%= crd.debug_manual_revision %>
|===

=== Privileged Modes

|===
| M | S | U | VS | VU

| <%- if crd.family.mandatory_priv_modes.include?('M') -%> MANDATORY <%- else -%> OUT_OF_SCOPE <%- end -%>
| <%- if crd.family.mandatory_priv_modes.include?('S') -%> MANDATORY <%- else -%> OUT_OF_SCOPE <%- end -%>
| <%- if crd.family.mandatory_priv_modes.include?('U') -%> MANDATORY <%- else -%> OUT_OF_SCOPE <%- end -%>
| <%- if crd.family.mandatory_priv_modes.include?('VS') -%> MANDATORY <%- else -%> OUT_OF_SCOPE <%- end -%>
| <%- if crd.family.mandatory_priv_modes.include?('VU') -%> MANDATORY <%- else -%> OUT_OF_SCOPE <%- end -%>

|===

=== Extension Summary

Any extension not listed in the table below is OUT OF SCOPE.

[%autowidth]
|===
| Extension | Version | Status | Requirement | Description

<%- crd.extension_reqs.sort.each do |ext_req| -%>
<%- ext = crd.arch_def.extension(ext_req.name) -%>
| <%= ext_req.name %>
| <%= ext_req.version_requirement %>
| <%= ext_req.status %>
| <%= ext_req.req_id %>
| <%= ext.nil? ? "" : ext.long_name %>
<%- end -%>
|===

== Extension Requirements

<%- crd.extension_reqs.sort.each do |ext_req| -%>
<%- ext = crd.arch_def.extension(ext_req.name) -%>

=== Extension <%= ext_req.name %>
* Requirement: <%= ext_req.req_id %>
<%= ext.nil? ? "" : "* Description: " + ext.long_name %>
<%- unless ext_req.note.nil? -%>
+
[NOTE]
--
<%= ext_req.note %>
--
<%- end -%>

<%- unless crd.param_constraints(ext_req).empty? -%>
==== Extension <%= ext_req.name %> - IN SCOPE Parameters

These parameters are covered by an <%= crd.name %> certificate.

[cols="3,1,2"]
|===
| Parameter | Constraint | Note
<%- crd.param_constraints(ext_req).each do |constraint| -%>
| <%= constraint.param.name %>
| <%= constraint.schema_constraint_pretty == "" ? "Unconstrained" : constraint.schema_constraint_pretty %>
a| <%= constraint.note %>
<%- end # do constraint -%>
|===
<%- end # unless table -%>

<%- unless crd.extension_out_of_scope_param_constraints(ext_req).empty? -%>
==== Extension <%= ext_req.name %> - OUT OF SCOPE Parameters

These parameters are *NOT* covered by an <%= crd.name %> certificate.

[cols="5,12"]
|===
| Parameter | Description
<%- crd.extension_out_of_scope_param_constraints(ext_req).each do |param| -%>
| <%= param.name %>
a| <%= param.desc %>
<%- end # do constraint -%>
|===
<%- end # unless table -%>
<%- end # do extension-%>

== Additional Requirements

This section contains requirements in addition to those already specified related to extensions and parameters.
These additional requirements are organized as groups of related requirements.

<%- crd.requirement_groups.each do |group| -%>
=== <%= group.name %>

<%= group.description %>

<%- unless group.when.nil? -%>
[IMPORTANT]
<%= group.name %> requirements only apply when <%= group.when_pretty %>.
<%- end -%>

[%autowidth]
|===
| Req Number | Description

<%- group.requirements.each do |req| -%>
| <%= req.name %>
a| <%= req.description %>
<%- unless req.when.nil? -%>
[IMPORTANT]
Requirement <%= req.name %> only apply when <%= req.when_pretty %>.
<%- end -%>
<%- end -%>
|===

<%- end -%>

[appendix]
== Extensions
TBD - Mainly here to allow long descriptions of parameters to be displayed outside the IN SCOPE parameter table.