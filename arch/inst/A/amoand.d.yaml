# yaml-language-server: $schema=../../../schemas/inst_schema.json

amoand.d:
  long_name: Atomic fetch-and-and doubleword
  description: |
     Atomically:
       
       * Load the doubleword at address _rs1_
       * Write the loaded value into _rd_
       * AND the value of register _rs2_ to the loaded value
       * Write the result to the address in _rs1_
  definedBy: [A, Zaamo]
  base: 64
  assembly: xd, xs2, (xrs1)
  encoding:
    match: 01100------------011-----0101111
    variables:
    - name: aq
      location: 26
    - name: rl
      location: 27
    - name: rs2
      location: 24-20
    - name: rs1
      location: 19-15
    - name: rd
      location: 11-7
  access:
    s: always
    u: always
    vs: always
    vu: always
  operation(): |
    if (implemented?(ExtensionName::A) && (CSR[misa].A == 1'b0)) {
      # even though this is a memory operation, the exception occurs before that would be known,
      # so mode() is the correct reporting mode rathat than effective_ldst_mode()
      raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
    }

    XReg virtual_address = X[rs1];

    X[rd] = amo<64>(virtual_address, X[rs2], AmoOperation::And, aq, rl, $encoding);
