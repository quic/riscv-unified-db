# yaml-language-server: $schema=../../../schemas/inst_schema.json

fcvt.h.s:
  long_name: Convert half-precision float to a single-precision float
  definedBy: [Zfh, Zfhmin]
  assembly: fd, xs1
  description: |
    Converts a half-precision number in floating-point register _fs1_ into a single-precision floating-point number in
    floating-point register _fd_.

    `fcvt.h.s` rounds according to the _rm_ field.

    All floating-point conversion instructions set the Inexact exception flag if the rounded
    result differs from the operand value and the Invalid exception flag is not set.

  encoding:
    match: 010001000000-------------1010011
    variables:
    - name: fs1
      location: 19-15
    - name: rm
      location: 14-12
    - name: fd
      location: 11-7  
  access:
    s: always
    u: always
    vs: always
    vu: always
  operation(): |
    check_f_ok();

    Bits<16> hp_value = f[fs1][15:0];

    Bits<1> sign = hp_value[15];
    Bits<5> exp = hp_value[14:10];
    Bits<10> frac = hp_value[9:0];

    if (exp == 0x1F) {
      if (frac != 0) {
        if ((hp_value & 0x0200) != 0) {
          set_fp_flag(FpFlag::NV);
        }
        f[fd] = HP_CANONICAL_NAN;
      } else {
        f[fd] = packToF32UI(sign, 0xFF, 0);
      }
    } else {
      if (exp != 0) {
        if (frac != 0) {
          f[fd] = packToF32UI(sign, 0, 0);
        } else {
          Bits<6> norm_exp;
          (norm_exp, frac) = soffloat_normSubnormalF16Sig( frac );
          exp = norm_exp - 1;
          f[fd] = packToF3UI(sign, exp + 0x70, frac << 13);
        }
      } else {
        f[fd] = packToF3UI(sign, exp + 0x70, frac << 13);
      }
    }

    mark_f_state_dirty();
