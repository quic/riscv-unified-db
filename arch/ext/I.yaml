# yaml-language-server: $schema=../../schemas/ext_schema.json

I:
  type: unprivileged
  long_name: Base integer ISA
  versions:
  - version: "2.1.0"
    state: ratified
    ratification_date: 2019-06
    changes: atified RVWMO memory model and exclusion of FENCE.I, counters, and CSR instructions that were in previous base ISA
  description: |
    Base integer instructions -- TODO
  interrupt_codes:
  - num: 1
    name: Supervisor software interrupt
    var: SupervisorSoftware
  - num: 3
    name: Machine software interrupt
    var: MachineSoftware
  - num: 5
    name: Supervisor timer interrupt
    var: SupervisorTimer
  - num: 7
    name: Machine timer interrupt
    var: MachineTimer
  - num: 9
    name: Supervisor external interrupt
    var: SupervisorExternal
  - num: 11
    name: Machine external interrupt
    var: MachineExternal
  exception_codes:
  - num: 0
    name: Instruction address misaligned
    var: InstructionAddressMisaligned
  - num: 1
    name: Instruction access fault
    var: InstructionAccessFault
  - num: 2
    name: Illegal instruction
    var: IllegalInstruction
  - num: 3
    name: Breakpoint
    var: Breakpoint
  - num: 4
    name: Load address misaligned
    var: LoadAddressMisaligned
  - num: 5
    name: Load access fault
    var: LoadAccessFault
  - num: 6
    name: Store/AMO address misaligned
    var: StoreAmoAddressMisaligned
  - num: 7
    name: Store/AMO access fault
    var: StoreAmoAccessFault
  - num: 8
    name: Environment call from <%- if ext?(:H) -%>V<%- end -%>U-mode
    var: Ucall
  - num: 9
    name: Environment call from <%- if ext?(:H) -%>H<%- end -%>S-mode
    var: Scall
  - num: 11
    name: Environment call from M-mode
    var: Mcall
  - num: 12
    name: Instruction page fault
    var: InstructionPageFault
  - num: 13
    name: Load page fault
    var: LoadPageFault
  - num: 15
    name: Store/AMO page fault
    var: StoreAmoPageFault
  - num: 18
    name: Software Check
    var: SoftwareCheck
    when:
      version: ">= 2.1.0"
  params:
    XLEN:
      description: |
        XLEN in M-mode (_i.e._, _MXLEN_)
      schema:
        type: integer
        enum: [32, 64]
    ARCH_ID:
      description: |
        Vendor-specific architecture ID in `marchid`
      schema:
        type: integer
        minimum: 0
        maximum: 0xffffffffffffffff
    IMP_ID:
      description: |
        Vendor-specific implementation ID in `mimpid`
      schema:
        type: integer
        minimum: 0
        maximum: 0xffffffffffffffff
    VENDOR_ID_BANK:
      description: |
        JEDEC Vendor ID bank, for `mvendorid`
      schema:
        type: integer
        minimum: 0
        maximum: 33554431
    VENDOR_ID_OFFSET:
      description: |
        Vendor JEDEC code offset, for `mvendorid`
      schema:
        type: integer
        minimum: 0
        maximum: 127
    MISALIGNED_LDST:
      description: |
        Whether or not the implementation supports non-atomic misaligned loads and stores in
        main memory (does *not* affect misaligned support to device memory)
      schema:
        type: boolean
    MISALIGNED_LDST_EXCEPTION_PRIORITY:
      description: |
        The relative priority of a load/store/AMO exception vs. load/store/AMO page-fault
        or access-fault exceptions.

        May be one of:

        [separator="!"]
        !===
        ! high ! Misaligned load/store/AMO exceptions are always higher priority than load/store/AMO page-fault and access-fault exceptions.
        ! low  ! Misaligned load/store/AMO exceptions are always lower priority than load/store/AMO page-fault and access-fault exceptions.
        !===

        MISALIGNED_LDST_EXCEPTION_PRIORITY cannot be "high" when MAX_MISALIGNED_ATOMICITY_GRANULE_SIZE
        is non-zero, since the atomicity of an access cannot be determined in that case until after
        address translation.
      schema:
        type: string
        enum: ["high", "low"]
        extra_validation: |
          assert (MISALIGNED_LDST_EXCEPTION_PRIORITY == "low") if MAX_MISALIGNED_ATOMICITY_GRANULE_SIZE.positive?
    MAX_MISALIGNED_ATOMICITY_GRANULE_SIZE:
      description: |
        The maximum granule size, in bytes, that the hart can atomically perform a
        misligned load/store/AMO without raising a Misaligned exception. When MAX_MISALIGNED_ATOMICITY_GRANULE_SIZE is 0, the hart
        cannot atomically perform a misaligned load/store/AMO. When a power of two, the hart can
        atomically load/store/AMO a misaligned access that is fully contained in a
        MAX_MISALIGNED_ATOMICITY_GRANULE_SIZE-aligned region.

        [NOTE]
        Even if the hart is capable of performing a misligned load/store/AMO atomically,
        a misaligned exception may still occur if the access does not have the appropriate
        Misaligned Atomicity Granule PMA set.
      schema:
        type: integer
        # can't be larger than a page, since there is no way to reconcile that with virtual memory
        enum: [0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
    MISALIGNED_SPLIT_STRATEGY:
      description: |
        when misaligned accesses are supported, this determines the *order* in the implementation appears
        to process the load/store, which determines how/which exceptions will be reported

        Options:
         * by_byte: The load/store appears to be broken into byte-sized accesses that processed sequentially from smallest address to largest address
         * custom: Something else. Will result in a call to unpredictable() in the execution
      schema: 
        type: string
        enum: ["by_byte", "custom"]
    COUNTINHIBIT_EN:
      description: |
        Indicates which counters can be disabled from `mcountinhibit`

        An unimplemented counter cannot be specified, i.e., if
        HPM_COUNTER_EN[3] is false, it would be illegal to set
        COUNTINHIBIT_EN[3] to true.

        COUNTINHIBIT_EN[1] can never be true, since it corresponds to `mcountinhibit.TM`,
        which is always read-only-0.

        COUNTINHIBIT_EN[3:31] must all be false if `Zihpm` is not implemented.
      schema:
        type: array
        items:
        - type: boolean
        - const: false
        - type: boolean
        additionalItems:
          type: boolean
        maxItems: 32
        minItems: 32
    MCOUNTENABLE_EN:
      description: |
        Indicates which counters can delegated via `mcounteren`

        An unimplemented counter cannot be specified, i.e., if
        HPM_COUNTER_EN[3] is false, it would be illegal to set
        MCOUNTENABLE_EN[3] to true.

        MCOUNTENABLE_EN[0:2] must all be false if `Zicntr` is not implemented.
        MCOUNTENABLE_EN[3:31] must all be false if `Zihpm` is not implemented.
      schema:
        type: array
        items:
          type: boolean
        maxItems: 32
        minItems: 32
    TRAP_ON_ILLEGAL_WLRL:
      description: |
        When true, writing an illegal value to a WLRL CSR field raises an `IllegalInstruction` exception.

        When false, writing an illegal value to a WLRL CSR field is `unpredictable`.
      schema:
        type: boolean
    TRAP_ON_UNIMPLEMENTED_INSTRUCTION:
      description: |
        When true, fetching an unimplemented instruction will cause an `IllegalInstruction` exception.

        When false, fetching an unimplemented instruction is `unpredictable`.
      schema:
        type: boolean
    TRAP_ON_UNIMPLEMENTED_CSR:
      description: |
        When true, accessing an unimplemented CSR (via a `Zicsr` instruction) will cause an `IllegalInstruction` exception.

        When false, accessing an unimplemented CSR (via a `Zicsr` instruction) is `unpredictable`.
      schema:
        type: boolean
    REPORT_VA_IN_MTVAL_ON_BREAKPOINT:
      description: |
        When true, `mtval` is written with the virtual PC of the EBREAK instruction (same information as `mepc`).

        When false, `mtval` is written with 0 on an EBREAK instruction.

        Regardless, `mtval` is always written with a virtual PC when an external breakpoint is generated
      schema:
        type: boolean
    REPORT_VA_IN_MTVAL_ON_LOAD_MISALIGNED:
      description: |
        When true, `mtval` is written with the virtual address of a load instruction when the
        address is misaligned and MISALIGNED_LDST is false.

        When false, `mtval` is written with 0 when a load address is misaligned and
        MISALIGNED_LDST is false.
      schema:
        type: boolean
    REPORT_VA_IN_MTVAL_ON_STORE_AMO_MISALIGNED:
      description: |
        When true, `mtval` is written with the virtual address of a store instruction when the
        address is misaligned and MISALIGNED_LDST is false.

        When false, `mtval` is written with 0 when a store address is misaligned and
        MISALIGNED_LDST is false.
      schema:
        type: boolean
    REPORT_VA_IN_MTVAL_ON_INSTRUCTION_MISALIGNED:
      description: |
        When true, `mtval` is written with the virtual PC when an instruction fetch is misaligned.

        When false, `mtval` is written with 0 when an instruction fetch is misaligned.

        Note that when IALIGN=16 (i.e., when the `C` or one of the `Zc*` extensions are implemented),
        it is impossible to generate a misaligned fetch, and so this parameter has no effect.
      schema:
        type: boolean
    REPORT_VA_IN_MTVAL_ON_LOAD_ACCESS_FAULT:
      description: |
        When true, `mtval` is written with the virtual address of a load when it causes a
        `LoadAccessFault`.

        WHen false, `mtval` is written with 0 when a load causes a `LoadAccessFault`.
      schema:
        type: boolean
    REPORT_VA_IN_MTVAL_ON_STORE_AMO_ACCESS_FAULT:
      description: |
        When true, `mtval` is written with the virtual address of a store when it causes a
        `StoreAmoAccessFault`.

        WHen false, `mtval` is written with 0 when a store causes a `StoreAmoAccessFault`.
      schema:
        type: boolean
    REPORT_VA_IN_MTVAL_ON_INSTRUCTION_ACCESS_FAULT:
      description: |
        When true, `mtval` is written with the virtual PC of an instructino when fetch causes an
        `InstructionAccessFault`.

        WHen false, `mtval` is written with 0 when an instruction fetch causes an
        `InstructionAccessFault`.
      schema:
        type: boolean
    REPORT_VA_IN_MTVAL_ON_LOAD_PAGE_FAULT:
      description: |
        When true, `mtval` is written with the virtual address of a load when it causes a
        `LoadPageFault`.

        WHen false, `mtval` is written with 0 when a load causes a `LoadPageFault`.
      schema:
        type: boolean
    REPORT_VA_IN_MTVAL_ON_STORE_AMO_PAGE_FAULT:
      description: |
        When true, `mtval` is written with the virtual address of a store when it causes a
        `StoreAmoPageFault`.

        WHen false, `mtval` is written with 0 when a store causes a `StoreAmoPageFault`.
      schema:
        type: boolean
    REPORT_VA_IN_MTVAL_ON_INSTRUCTION_PAGE_FAULT:
      description: |
        When true, `mtval` is written with the virtual PC of an instructino when fetch causes an
        `InstructionPageFault`.

        WHen false, `mtval` is written with 0 when an instruction fetch causes an
        `InstructionPageFault`.
      schema:
        type: boolean
    REPORT_ENCODING_IN_MTVAL_ON_ILLEGAL_INSTRUCTION:
      description: |
        When true, `mtval` is written with the encoding of an instruction that causes an
        `IllegalInstruction` exception.

        When false `mtval` is written with 0 when an `IllegalInstruction` exception occurs.
      schema:
        type: boolean
    MTVAL_WIDTH:
      description: |
        The number of implemented bits in `mtval`.

        Must be greater than or equal to _max_(`PHYS_ADDR_WIDTH`, `VA_SIZE`)
      schema:
        type: integer
        maximum: 0xffffffffffffffff
    CONFIG_PTR_ADDRESS:
      description: |
        Physical address of the unified discovery configuration data structure
        this address is reported in the `mconfigptr` CSR
      schema:
        type: integer
    NUM_PMP_ENTRIES:
      description: |
        Number of implemented PMP entries. Can be any value between 0-64, inclusive.
  
        The architecture mandates that the number of implemented PMP registers
        must appear to be 0, 16, or 64.

        Therefore, pmp registers will behave as follows according to NUN_PMP_ENTRIES:
        
        [separator="!"]
        !===
        ! NUM_PMP_ENTRIES ! pmpaddr<0-15> / pmpcfg<0-3> ! pmpaddr<16-63> / pmpcfg<4-15>
        ! 0               ! N                           ! N
        ! 1-16            ! Y                           ! N
        ! 17-64           ! Y                           ! Y
        !===

        ** N = Not implemented; access will cause `IllegalInstruction`
           if TRAP_ON_UNIMPLEMENTED_CSR is true
        ** Y = Implemented; access will not cause an exception (from M-mode), but register
           may be read-only-zero if NUM_PMP_ENTRIES is less than the corresponding register
        
        [NOTE]
        `pmpcfgN` for an odd N never exists when XLEN == 64

        When NUM_PMP_ENTRIES is not exactly 0, 16, or 64, some extant pmp registers,
        and associated pmpNcfg, will be read-only zero (but will never cause an exception).
      schema:
        type: integer
        minimum: 0
        maximum: 64
    PMP_GRANULARITY:
      description: |
        log2 of the smallest supported PMP region.
        
        Generally, for systems with an MMU, should not be smaller than 12,
        as that would preclude caching PMP results in the TLB along with
        virtual memory translations

        Note that PMP_GRANULARITY is equal to G+2 (not G) as described in
        the privileged architecture.
      schema:
        type: integer
        minimum: 2
        maximum: 66
    PMA_GRANULARITY:
      description: |
        log2 of the smallest supported PMA region.
        
        Generally, for systems with an MMU, should not be smaller than 12,
        as that would preclude caching PMP results in the TLB along with
        virtual memory translations
      schema:
        type: integer
        minimum: 2
        maximum: 66
    PHYS_ADDR_WIDTH:
      description: |
        Number of bits in the physical address space.
      schema:
        type: integer
        mimimum: 1
        maximum: 64
    M_MODE_ENDIANESS:
      description: |
        Endianess of data in M-mode. Can be one of:

        [separator="!"]
        !===
        h! little  ! M-mode data is always little endian
        h! big     ! M-mode data is always big endian
        h! dynamic ! M-mode data can be either little or big endian,
                     depending on the CSR field `mstatus.MBE`
        !===
      schema:
        type: string
        enum: [little, big, dynamic]