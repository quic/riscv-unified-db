mc:
  name: Microcontroller Certification
  long_name: LONG NAME
  revision_history:
  - version: "0.7"
    date: 2024-07-29
    changes:
    - First version after moving non-microcontroller content in this document to a new document
      called “RISC-V Certification Plans”
    - Change MC-1 Unpriv ISA spec from
      “https://riscv.org/wp-content/uploads/2016/06/riscv-spec-v2.1.pdf[riscv-spec-v2.1], May 31,
      2016” to https://github.com/riscv/riscv-isa-manual/releases/tag/Ratified-IMAFDQC since the
      former isn't ratified by the latter is the oldest ratified version.
    - Added requirements for WFI instruction
    - Added requirements related to msip memory-mapped register
  - version: "0.6"
    date: 2024-07-11
    changes:
    - Supporting multiple MC versions to support customers wanting to certify existing microcontrollers not using the latest version of ratified standards.
    - Changed versioning scheme to use major.minor.patch instead of 3-digit major & minor.
    - Added a table showing the mapping from MC version to ISA manuals.
    - "..."
  
  overview: |
    This Certification Plan proposes requirements for the “MC” certified RISC-V microcontroller.
    MC targets microcontrollers running low-level software on an RTOS or bare-metal.
    The MC is not intended for the smallest possible microcontrollers but rather for applications
    requiring a certified microcontroller.
    See the https://docs.google.com/document/d/133SZKc18tLsQcT1o6gEmBUkjwrtg2ow63me54RQ1jiY[RISC-V Certification Plan]
    document for information relevant to all RISC-V Certification Plans.

    The MC (M = Microcontroller, C = Certified) has the following naming scheme (suffixes after MC
    are optional but in the below order):

    ...
  
  versions:
  - version: "1.0"
    name: MC-1
    description: "..."
  - version: "2.0"
    name: MC-2
    description: "..."

  mandatory_priv_modes:
  - M

  mandatory_extensions:
  - name: I
    version: "~> 2.1"
  - name: B
    version: "~> 1.0"
    when:
      plan_version: ">= 2.0"
  - name: C
    version: "~> 2.2"
  - name: M
    version: "~> 2.0"
  - name: Zicsr
    version: "~> 2.0"
  - name: Zicntr
    version: "~> 2.0"

  param_constraints:
    PRECISE_SYNCHRONOUS_EXCEPTIONS:
      schema:
        const: true
    TRAP_ON_UNIMPLEMENTED_CSR:
      schema:
        const: true
    TRAP_ON_UNIMPLEMENTED_INSTRUCTION:
      schema:
        const: true
    TRAP_ON_ECALL_FROM_M:
      note: REQ-UINST-017
      schema:
        const: true
    REPORT_VA_IN_MTVAL_ON_BREAKPOINT:
      schema:
        const: true
    REPORT_VA_IN_MTVAL_ON_INSTRUCTION_ACCESS_FAULT:
      schema:
        const: true
    REPORT_VA_IN_MTVAL_ON_LOAD_ACCESS_FAULT:
      schema:
        const: true
    REPORT_VA_IN_MTVAL_ON_STORE_AMO_ACCESS_FAULT:
      schema:
        const: true
    REPORT_ENCODING_IN_MTVAL_ON_ILLEGAL_INSTRUCTION:
      schema:
        const: true
    M_MODE_ENDIANESS:
      schema:
        const: little
    # OPT-RDTIME doesn't need constraint (behavior defined by TIME_CSR_IMPLEMENTED)
    # OPT-MTIME-PADDR doesn't have parameter -- it's considered non-ISA by the database
    # OPT-MTIMECMP-PADDR doesn't have parameter -- it's considered non-ISA by the database
    # OPT-MSIP-PADDR doesn't have parameter -- it's considered non-ISA by the database
    # OPT-MHARTID doesn't need constrained (behavior is a builtin)
    # OPT-MVENDORID doesn't need constrained (but behavior is controlled by VENDOR_ID_BANK and VENDOR_ID_OFFSET)
    # OPT-MARCHID doesn't need constrained (but behavior is controlled by ARCH_ID)
    # OPT-MIMPID doesn't need constrained (but behavior is controlled by IMP_ID)
    # OPT-MISA doesn't need constrained (but behavior is controlled by MISA_CSR_IMPLEMENTED)
    # OPT-CLINT doesn't need a parameter; it is mandated in the spec
    # OPT-CLIC doesn't need a paramter
    MTVEC_BASE_ALIGNMENT_DIRECT:
      note: OPT-MTVEC-ALIGN-DIRECT
      schema:
        const: 4
    MTVEC_BASE_ALIGNMENT_VECTORED:
      note: OPT-MTVEV-ALIGN-VECTORED
      schema:
        const: 4

  requirements:
    REQ-UINST-001:
      it: Should use little-endian byte order
    REQ-UINST-003:
      it: Should implement the B extension instructions
      when:
        version: ">= 2.0"
    
    REQ-UCSR-001-a:
      it: Should raise an Illegal Instruction exception when writing to the `cycle` CSR

    REQ-UCSR-001-b:
      it: Should return the XLEN least-significant bits of the `mcycle` CSR when reading the `cycle` CSR
    
    REQ-UCSR-002-a:
      it: Should raise an Illegal Instruction exception when writing to the `time` CSR

    REQ-UCSR-002-b:
      it: Should return the XLEN least-significant bits of the `mtime` CSR when reading the `time` CSR
      when:
        param:
          TIME_CSR_IMPLEMENTED: true

    REQ-UCSR-002-c:
      it: Should raise an Illegal Instruction exception when reading the `time` CSR
      when:
        param:
          TIME_CSR_IMPLEMENTED: false

    REQ-M32CSR-001-a:
      it: Should raise an illegal instruction trap when writing the 'cycleh' CSR
      when:
        xlen: 32
      group: MC-unpriv-32
    REQ-M32CSR-001-b:
      it: Should return the most-significant 32-bits of the `mcycle` CSR when reading `cycleh`
      when:
        xlen: 32
      group: MC-unpriv-32
    REQ-M32CSR-002:
      it: Should return the most-significant 32-bits of the `minstret` CSR when reading `instreth`
      when:
        xlen: 32
      group: MC-unpriv-32
